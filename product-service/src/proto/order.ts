// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.0
//   protoc               v5.27.2
// source: order.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import * as _m0 from "protobufjs/minimal";
import { Product } from "./product";

export const protobufPackage = "order";

export enum EnumStatus {
  UNKNOWN = 0,
  PENDING = 1,
  COMPLETED = 2,
  CANCELLED = 3,
  UNRECOGNIZED = -1,
}

export function enumStatusFromJSON(object: any): EnumStatus {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return EnumStatus.UNKNOWN;
    case 1:
    case "PENDING":
      return EnumStatus.PENDING;
    case 2:
    case "COMPLETED":
      return EnumStatus.COMPLETED;
    case 3:
    case "CANCELLED":
      return EnumStatus.CANCELLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EnumStatus.UNRECOGNIZED;
  }
}

export function enumStatusToJSON(object: EnumStatus): string {
  switch (object) {
    case EnumStatus.UNKNOWN:
      return "UNKNOWN";
    case EnumStatus.PENDING:
      return "PENDING";
    case EnumStatus.COMPLETED:
      return "COMPLETED";
    case EnumStatus.CANCELLED:
      return "CANCELLED";
    case EnumStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SelectedProduct {
  id: string;
  quantity: number;
}

export interface Order {
  id: string;
  products: SelectedProduct[];
  status: EnumStatus;
}

export interface CompleteOrder {
  id: string;
  products: Product[];
  total: number;
  status: EnumStatus;
}

export interface GetOrderRequest {
  id: string;
}

export interface GetOrderResponse {
  order: CompleteOrder | undefined;
}

export interface ListOrdersRequest {
}

export interface ListOrdersResponse {
  orders: CompleteOrder[];
}

export interface CreateOrderRequest {
  products: SelectedProduct[];
}

export interface CreateOrderResponse {
  order: CompleteOrder | undefined;
}

export interface ChangeOrderStatusRequest {
  status: EnumStatus;
  id: string;
}

export interface ChangeOrderStatusResponse {
  order: CompleteOrder | undefined;
}

export interface CancelOrderRequest {
  id: string;
}

export interface CancelOrderResponse {
  success: boolean;
}

function createBaseSelectedProduct(): SelectedProduct {
  return { id: "", quantity: 0 };
}

export const SelectedProduct = {
  encode(message: SelectedProduct, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.quantity !== 0) {
      writer.uint32(16).int32(message.quantity);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SelectedProduct {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSelectedProduct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.quantity = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SelectedProduct {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
    };
  },

  toJSON(message: SelectedProduct): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SelectedProduct>, I>>(base?: I): SelectedProduct {
    return SelectedProduct.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SelectedProduct>, I>>(object: I): SelectedProduct {
    const message = createBaseSelectedProduct();
    message.id = object.id ?? "";
    message.quantity = object.quantity ?? 0;
    return message;
  },
};

function createBaseOrder(): Order {
  return { id: "", products: [], status: 0 };
}

export const Order = {
  encode(message: Order, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    for (const v of message.products) {
      SelectedProduct.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Order {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOrder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.products.push(SelectedProduct.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Order {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      products: globalThis.Array.isArray(object?.products)
        ? object.products.map((e: any) => SelectedProduct.fromJSON(e))
        : [],
      status: isSet(object.status) ? enumStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: Order): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.products?.length) {
      obj.products = message.products.map((e) => SelectedProduct.toJSON(e));
    }
    if (message.status !== 0) {
      obj.status = enumStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Order>, I>>(base?: I): Order {
    return Order.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Order>, I>>(object: I): Order {
    const message = createBaseOrder();
    message.id = object.id ?? "";
    message.products = object.products?.map((e) => SelectedProduct.fromPartial(e)) || [];
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseCompleteOrder(): CompleteOrder {
  return { id: "", products: [], total: 0, status: 0 };
}

export const CompleteOrder = {
  encode(message: CompleteOrder, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    for (const v of message.products) {
      Product.encode(v!, writer.uint32(18).fork()).ldelim();
    }
    if (message.total !== 0) {
      writer.uint32(25).double(message.total);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CompleteOrder {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompleteOrder();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.products.push(Product.decode(reader, reader.uint32()));
          continue;
        case 3:
          if (tag !== 25) {
            break;
          }

          message.total = reader.double();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CompleteOrder {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      products: globalThis.Array.isArray(object?.products) ? object.products.map((e: any) => Product.fromJSON(e)) : [],
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
      status: isSet(object.status) ? enumStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: CompleteOrder): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.products?.length) {
      obj.products = message.products.map((e) => Product.toJSON(e));
    }
    if (message.total !== 0) {
      obj.total = message.total;
    }
    if (message.status !== 0) {
      obj.status = enumStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CompleteOrder>, I>>(base?: I): CompleteOrder {
    return CompleteOrder.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CompleteOrder>, I>>(object: I): CompleteOrder {
    const message = createBaseCompleteOrder();
    message.id = object.id ?? "";
    message.products = object.products?.map((e) => Product.fromPartial(e)) || [];
    message.total = object.total ?? 0;
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseGetOrderRequest(): GetOrderRequest {
  return { id: "" };
}

export const GetOrderRequest = {
  encode(message: GetOrderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOrderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrderRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetOrderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrderRequest>, I>>(base?: I): GetOrderRequest {
    return GetOrderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrderRequest>, I>>(object: I): GetOrderRequest {
    const message = createBaseGetOrderRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetOrderResponse(): GetOrderResponse {
  return { order: undefined };
}

export const GetOrderResponse = {
  encode(message: GetOrderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.order !== undefined) {
      CompleteOrder.encode(message.order, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetOrderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetOrderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.order = CompleteOrder.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetOrderResponse {
    return { order: isSet(object.order) ? CompleteOrder.fromJSON(object.order) : undefined };
  },

  toJSON(message: GetOrderResponse): unknown {
    const obj: any = {};
    if (message.order !== undefined) {
      obj.order = CompleteOrder.toJSON(message.order);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetOrderResponse>, I>>(base?: I): GetOrderResponse {
    return GetOrderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetOrderResponse>, I>>(object: I): GetOrderResponse {
    const message = createBaseGetOrderResponse();
    message.order = (object.order !== undefined && object.order !== null)
      ? CompleteOrder.fromPartial(object.order)
      : undefined;
    return message;
  },
};

function createBaseListOrdersRequest(): ListOrdersRequest {
  return {};
}

export const ListOrdersRequest = {
  encode(_: ListOrdersRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrdersRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrdersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListOrdersRequest {
    return {};
  },

  toJSON(_: ListOrdersRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOrdersRequest>, I>>(base?: I): ListOrdersRequest {
    return ListOrdersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOrdersRequest>, I>>(_: I): ListOrdersRequest {
    const message = createBaseListOrdersRequest();
    return message;
  },
};

function createBaseListOrdersResponse(): ListOrdersResponse {
  return { orders: [] };
}

export const ListOrdersResponse = {
  encode(message: ListOrdersResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.orders) {
      CompleteOrder.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListOrdersResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListOrdersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.orders.push(CompleteOrder.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListOrdersResponse {
    return {
      orders: globalThis.Array.isArray(object?.orders) ? object.orders.map((e: any) => CompleteOrder.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListOrdersResponse): unknown {
    const obj: any = {};
    if (message.orders?.length) {
      obj.orders = message.orders.map((e) => CompleteOrder.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListOrdersResponse>, I>>(base?: I): ListOrdersResponse {
    return ListOrdersResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListOrdersResponse>, I>>(object: I): ListOrdersResponse {
    const message = createBaseListOrdersResponse();
    message.orders = object.orders?.map((e) => CompleteOrder.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateOrderRequest(): CreateOrderRequest {
  return { products: [] };
}

export const CreateOrderRequest = {
  encode(message: CreateOrderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.products) {
      SelectedProduct.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateOrderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.products.push(SelectedProduct.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOrderRequest {
    return {
      products: globalThis.Array.isArray(object?.products)
        ? object.products.map((e: any) => SelectedProduct.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CreateOrderRequest): unknown {
    const obj: any = {};
    if (message.products?.length) {
      obj.products = message.products.map((e) => SelectedProduct.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateOrderRequest>, I>>(base?: I): CreateOrderRequest {
    return CreateOrderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateOrderRequest>, I>>(object: I): CreateOrderRequest {
    const message = createBaseCreateOrderRequest();
    message.products = object.products?.map((e) => SelectedProduct.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateOrderResponse(): CreateOrderResponse {
  return { order: undefined };
}

export const CreateOrderResponse = {
  encode(message: CreateOrderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.order !== undefined) {
      CompleteOrder.encode(message.order, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateOrderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateOrderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.order = CompleteOrder.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateOrderResponse {
    return { order: isSet(object.order) ? CompleteOrder.fromJSON(object.order) : undefined };
  },

  toJSON(message: CreateOrderResponse): unknown {
    const obj: any = {};
    if (message.order !== undefined) {
      obj.order = CompleteOrder.toJSON(message.order);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateOrderResponse>, I>>(base?: I): CreateOrderResponse {
    return CreateOrderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateOrderResponse>, I>>(object: I): CreateOrderResponse {
    const message = createBaseCreateOrderResponse();
    message.order = (object.order !== undefined && object.order !== null)
      ? CompleteOrder.fromPartial(object.order)
      : undefined;
    return message;
  },
};

function createBaseChangeOrderStatusRequest(): ChangeOrderStatusRequest {
  return { status: 0, id: "" };
}

export const ChangeOrderStatusRequest = {
  encode(message: ChangeOrderStatusRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChangeOrderStatusRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangeOrderStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangeOrderStatusRequest {
    return {
      status: isSet(object.status) ? enumStatusFromJSON(object.status) : 0,
      id: isSet(object.id) ? globalThis.String(object.id) : "",
    };
  },

  toJSON(message: ChangeOrderStatusRequest): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = enumStatusToJSON(message.status);
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChangeOrderStatusRequest>, I>>(base?: I): ChangeOrderStatusRequest {
    return ChangeOrderStatusRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChangeOrderStatusRequest>, I>>(object: I): ChangeOrderStatusRequest {
    const message = createBaseChangeOrderStatusRequest();
    message.status = object.status ?? 0;
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseChangeOrderStatusResponse(): ChangeOrderStatusResponse {
  return { order: undefined };
}

export const ChangeOrderStatusResponse = {
  encode(message: ChangeOrderStatusResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.order !== undefined) {
      CompleteOrder.encode(message.order, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ChangeOrderStatusResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangeOrderStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.order = CompleteOrder.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangeOrderStatusResponse {
    return { order: isSet(object.order) ? CompleteOrder.fromJSON(object.order) : undefined };
  },

  toJSON(message: ChangeOrderStatusResponse): unknown {
    const obj: any = {};
    if (message.order !== undefined) {
      obj.order = CompleteOrder.toJSON(message.order);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChangeOrderStatusResponse>, I>>(base?: I): ChangeOrderStatusResponse {
    return ChangeOrderStatusResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChangeOrderStatusResponse>, I>>(object: I): ChangeOrderStatusResponse {
    const message = createBaseChangeOrderStatusResponse();
    message.order = (object.order !== undefined && object.order !== null)
      ? CompleteOrder.fromPartial(object.order)
      : undefined;
    return message;
  },
};

function createBaseCancelOrderRequest(): CancelOrderRequest {
  return { id: "" };
}

export const CancelOrderRequest = {
  encode(message: CancelOrderRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CancelOrderRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelOrderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelOrderRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: CancelOrderRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CancelOrderRequest>, I>>(base?: I): CancelOrderRequest {
    return CancelOrderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CancelOrderRequest>, I>>(object: I): CancelOrderRequest {
    const message = createBaseCancelOrderRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseCancelOrderResponse(): CancelOrderResponse {
  return { success: false };
}

export const CancelOrderResponse = {
  encode(message: CancelOrderResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CancelOrderResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCancelOrderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CancelOrderResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: CancelOrderResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CancelOrderResponse>, I>>(base?: I): CancelOrderResponse {
    return CancelOrderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CancelOrderResponse>, I>>(object: I): CancelOrderResponse {
    const message = createBaseCancelOrderResponse();
    message.success = object.success ?? false;
    return message;
  },
};

export type OrderServiceService = typeof OrderServiceService;
export const OrderServiceService = {
  getOrder: {
    path: "/order.OrderService/GetOrder",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetOrderRequest) => Buffer.from(GetOrderRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetOrderRequest.decode(value),
    responseSerialize: (value: GetOrderResponse) => Buffer.from(GetOrderResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetOrderResponse.decode(value),
  },
  listOrders: {
    path: "/order.OrderService/ListOrders",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListOrdersRequest) => Buffer.from(ListOrdersRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListOrdersRequest.decode(value),
    responseSerialize: (value: ListOrdersResponse) => Buffer.from(ListOrdersResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListOrdersResponse.decode(value),
  },
  createOrder: {
    path: "/order.OrderService/CreateOrder",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateOrderRequest) => Buffer.from(CreateOrderRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateOrderRequest.decode(value),
    responseSerialize: (value: CreateOrderResponse) => Buffer.from(CreateOrderResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateOrderResponse.decode(value),
  },
  changeOrderStatus: {
    path: "/order.OrderService/ChangeOrderStatus",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ChangeOrderStatusRequest) => Buffer.from(ChangeOrderStatusRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ChangeOrderStatusRequest.decode(value),
    responseSerialize: (value: ChangeOrderStatusResponse) =>
      Buffer.from(ChangeOrderStatusResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ChangeOrderStatusResponse.decode(value),
  },
  cancelOrder: {
    path: "/order.OrderService/CancelOrder",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CancelOrderRequest) => Buffer.from(CancelOrderRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CancelOrderRequest.decode(value),
    responseSerialize: (value: CancelOrderResponse) => Buffer.from(CancelOrderResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CancelOrderResponse.decode(value),
  },
} as const;

export interface OrderServiceServer extends UntypedServiceImplementation {
  getOrder: handleUnaryCall<GetOrderRequest, GetOrderResponse>;
  listOrders: handleUnaryCall<ListOrdersRequest, ListOrdersResponse>;
  createOrder: handleUnaryCall<CreateOrderRequest, CreateOrderResponse>;
  changeOrderStatus: handleUnaryCall<ChangeOrderStatusRequest, ChangeOrderStatusResponse>;
  cancelOrder: handleUnaryCall<CancelOrderRequest, CancelOrderResponse>;
}

export interface OrderServiceClient extends Client {
  getOrder(
    request: GetOrderRequest,
    callback: (error: ServiceError | null, response: GetOrderResponse) => void,
  ): ClientUnaryCall;
  getOrder(
    request: GetOrderRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetOrderResponse) => void,
  ): ClientUnaryCall;
  getOrder(
    request: GetOrderRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetOrderResponse) => void,
  ): ClientUnaryCall;
  listOrders(
    request: ListOrdersRequest,
    callback: (error: ServiceError | null, response: ListOrdersResponse) => void,
  ): ClientUnaryCall;
  listOrders(
    request: ListOrdersRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListOrdersResponse) => void,
  ): ClientUnaryCall;
  listOrders(
    request: ListOrdersRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListOrdersResponse) => void,
  ): ClientUnaryCall;
  createOrder(
    request: CreateOrderRequest,
    callback: (error: ServiceError | null, response: CreateOrderResponse) => void,
  ): ClientUnaryCall;
  createOrder(
    request: CreateOrderRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateOrderResponse) => void,
  ): ClientUnaryCall;
  createOrder(
    request: CreateOrderRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateOrderResponse) => void,
  ): ClientUnaryCall;
  changeOrderStatus(
    request: ChangeOrderStatusRequest,
    callback: (error: ServiceError | null, response: ChangeOrderStatusResponse) => void,
  ): ClientUnaryCall;
  changeOrderStatus(
    request: ChangeOrderStatusRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ChangeOrderStatusResponse) => void,
  ): ClientUnaryCall;
  changeOrderStatus(
    request: ChangeOrderStatusRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ChangeOrderStatusResponse) => void,
  ): ClientUnaryCall;
  cancelOrder(
    request: CancelOrderRequest,
    callback: (error: ServiceError | null, response: CancelOrderResponse) => void,
  ): ClientUnaryCall;
  cancelOrder(
    request: CancelOrderRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CancelOrderResponse) => void,
  ): ClientUnaryCall;
  cancelOrder(
    request: CancelOrderRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CancelOrderResponse) => void,
  ): ClientUnaryCall;
}

export const OrderServiceClient = makeGenericClientConstructor(
  OrderServiceService,
  "order.OrderService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): OrderServiceClient;
  service: typeof OrderServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
